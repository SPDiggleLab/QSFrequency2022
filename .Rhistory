source('~/CYZ GITHUB/Digglets/For_Conan/MASTER_IPCD-analysis.R')
df.truncations
test = df.truncations
rownames(df.truncations) = NULL
df.truncations
write.table(df.truncations, file = '2021_06_03-Truncs.csv', sep=',', row.names = F)
source('~/GitHub/Frequency_of_quorum_sensing_mutations_in_Pa2021/MASTER_IPCD-analysis.R')
gene
# NUCLEOTIDE ANALYSIS
source('nucleotide.R')
source('process_inputs.R')
source('parse_metadata.R')
source('parse_inputs.R')
rm(list=ls())
## 04.11.2020 - CYZ
## This script loads all lab inputs and creates a master input data file.
## The entries in the data are quality controlled:
## -- Sequences must have START codon.
#  (0) Helpers ------------------------------------------------------------
Fix_Known_Database_Discrepancies = function(strains){
# Some of the entries in the IPCD database online dont' agree with what's keyed in NCBI.
# This is a correction of what I noticed were some mismatches.
ret = strains
ret = as.vector(gsub('MCF', 'AL', ret))
return(ret)
}
# (1) Second Method -------------------------------------------------------
# Idea: Should be gene-focused. For each gene, add on the metadata information for the gene.
temp.ls_out = list()
# alternate labs
df.lab_strain_meta = read.table('INPUT/strain_meta.tsv', sep='\t', header = T, stringsAsFactors = F)
# if there are query duplicates, remove both.
v.duplicates = df.lab_strain_meta$STRAIN_ID[duplicated(df.lab_strain_meta$STRAIN_ID)]
df.lab_strain_meta = df.lab_strain_meta[!(df.lab_strain_meta$STRAIN_ID %in% v.duplicates),]
# Extract gene information
gene_files = list.files('INPUT/genes/', pattern='.tsv')
for(genefile in gene_files){
gene = strsplit(genefile, '_')[[1]][1]
temp.in = read.table(paste('INPUT/genes/', genefile, sep='', collapse=''), header=T, stringsAsFactors=F)
# there are duplicate entries for fragments
temp.in$INFO[duplicated(temp.in$INFO)] = paste(temp.in$INFO[duplicated(temp.in$INFO)], '_frag', sep='')
rownames(temp.in) = temp.in$INFO
# raw_strain corrections: word 'strain' missing from info
b.no_strain = !grepl('Pseudomonas aeruginosa strain', temp.in$INFO)
temp.in$INFO[b.no_strain] = gsub('Pseudomonas aeruginosa', 'Pseudomonas aeruginosa strain', temp.in$INFO[b.no_strain])
# Parse INFO for strain name
raw_strains = temp.in$INFO
# Obtain lab-reported strain ID
parsed_strains = sapply(raw_strains, function(x){
if(grepl('isolate', x)){
split1 = strsplit(x, 'isolate ')[[1]][2]
split2 = strsplit(split1, ' IPC')[[1]][1]
}else{
split1 = strsplit(x, 'strain ')[[1]][2]
split2 = strsplit(split1, ' IPC')[[1]][1]
}
return(split2)
})
# Obtain NCBI ID
alt_strain_id = sapply(raw_strains, function(x){
split1 = strsplit(x, ' ')[[1]][1]
return(split1)
})
# Obtain IPC ID
IPCD_strain_id = sapply(raw_strains, function(x){
split1 = strsplit(x, ',')[[1]][1]
split2 = strsplit(split1, ' IPC')[[1]][2]
return(paste('IPC', split2, sep='', collapse=''))
})
# Some parsed_strains have issues as well; this is a manual rule application
fixed_strains = Fix_Known_Database_Discrepancies(parsed_strains)
# Create a summary df for debugging
df.strains_ref_by_gene = data.frame('STRAIN' = fixed_strains
, 'ALT_ID' = alt_strain_id
, 'IPCD_ID' = IPCD_strain_id
, 'GENE' = gene
, 'raw_ID' = raw_strains
, 'parsed_ID' = parsed_strains
, stringsAsFactors = F)
rownames(df.strains_ref_by_gene) = df.strains_ref_by_gene$raw_ID
# Combine
temp.in = cbind(temp.in, df.strains_ref_by_gene[temp.in$INFO, c('STRAIN', 'ALT_ID', 'IPCD_ID', 'GENE')])
# Setup new columns for combination
temp.in[,colnames(df.lab_strain_meta)] = NA
errlist = cbind('gene' = rep(NA, nrow(temp.in)), 'errtype' = rep(NA, nrow(temp.in)))
# query lab_strain_meta the careful way
for(i in 1:nrow(temp.in)){
# Expect only one query per temp.in entry
i_strain = temp.in[i,'STRAIN']
b.strain_meta = (df.lab_strain_meta$STRAIN_ID == i_strain)
# If no exact match, use grep to identify single entry with closest match
if(sum(b.strain_meta)==0){
b.strain_meta = grepl(i_strain, df.lab_strain_meta$STRAIN_ID)
errlist[i,] = c(i_strain, 'grepl used')
}
if(sum(b.strain_meta)== 1){
temp.in[i,colnames(df.lab_strain_meta)] = df.lab_strain_meta[b.strain_meta,]
}else{
errlist[i,] = c(i_strain, 'multi-hit')
}
}
# Save info
temp.ls_out[[gene]] = temp.in
}
df.masterList = do.call('rbind', temp.ls_out)
# output
write.csv(df.masterList,  paste('OUTPUT/',Sys.Date(), '_master-table.csv', sep='', collapse=''), row.names = F, na = '')
genefile
gene = strsplit(genefile, '_')[[1]][1]
temp.in = read.table(paste('INPUT/genes/', genefile, sep='', collapse=''), header=T, stringsAsFactors=F)
genefile
test = read.table(genefile)
test = read.table(paste('gene/', genefile, sep='', collapse=''))
test = read.table(paste('genes/', genefile, sep='', collapse=''))
test = read.table(paste('INPUT/genes/', genefile, sep='', collapse=''))
test = read.table(paste('INPUT/genes/', genefile, sep='', collapse=''), sep='\t')
test
ncol(test)
colnames(test) ="INFO"	"SEQUENCE"	"MISMATCH"	"GAPS"	"PCT_ID"	"QUERY_COV"	"BIT_SCORE"	"E-VALUE"
colnames(test) = c("INFO",	"SEQUENCE",	"MISMATCH",	"GAPS",	"PCT_ID",	"QUERY_COV",	"BIT_SCORE",	"E-VALUE")
headD(test)
test
write.table(test, 'test.tsv', sep='\t')
write.table(test, 'test.tsv', sep='\t', row.names = F)
genefile
test = read.table(paste('INPUT/genes/', 'rpoA_seqs_from_IPCD.tsv', sep='', collapse=''), sep='\t')
colnames(test) = c("INFO",	"SEQUENCE",	"MISMATCH",	"GAPS",	"PCT_ID",	"QUERY_COV",	"BIT_SCORE",	"E-VALUE")
write.table(test, 'test.tsv', sep='\t')
source('~/GitHub/Frequency_of_quorum_sensing_mutations_in_Pa2021/MASTER_IPCD-analysis.R')
source('~/GitHub/Frequency_of_quorum_sensing_mutations_in_Pa2021/MASTER_IPCD-analysis.R')
gene
test = read.csv('INPUT/genes/rsaL_matches.tsv')
head(test)
head(test)
head(test)
test = read.csv('INPUT/genes/rsaL_matches.tsv', col.names = F)
test
head(test)
test = read.csv('INPUT/genes/rsaL_matches.tsv', header = F)
head(test)
colnames(test) = c("INFO",	"SEQUENCE",	"MISMATCH",	"GAPS",	"PCT_ID",	"QUERY_COV",	"BIT_SCORE",	"E-VALUE")
ncol(test)
test = read.table('INPUT/genes/rsaL_matches.tsv', header = F)
test = read.table('INPUT/genes/rsaL_matches.tsv', header = F, sep='\t')
head(test)
test = read.table('INPUT/genes/rsaL_matches.tsv', header = F, sep='\t')
colnames(test) = c("INFO",	"SEQUENCE",	"MISMATCH",	"GAPS",	"PCT_ID",	"QUERY_COV",	"BIT_SCORE",	"E-VALUE")
test = read.table('INPUT/genes/rsaL_matches.tsv'
, header = F
, sep='\t')
colnames(test) = c("INFO",	"SEQUENCE",	"MISMATCH",	"GAPS",	"PCT_ID",	"QUERY_COV",	"BIT_SCORE",	"E-VALUE")
write.table(test, file = 'INPUT/genes/rsaL_seqs_from_IPCD.tsv'
, sep='\t'
, quote = T
, row.names = F
, col.names = T)
test = read.table('INPUT/genes/rsmA_matches.tsv'
, header = F
, sep='\t')
colnames(test) = c("INFO",	"SEQUENCE",	"MISMATCH",	"GAPS",	"PCT_ID",	"QUERY_COV",	"BIT_SCORE",	"E-VALUE")
write.table(test, file = 'INPUT/genes/rsmA_seqs_from_IPCD.tsv'
, sep='\t'
, quote = T
, row.names = F
, col.names = T)
test = read.table('INPUT/genes/mucA_seqs_from_IPCD.tsv'
, header = F
, sep='\t')
colnames(test) = c("INFO",	"SEQUENCE",	"MISMATCH",	"GAPS",	"PCT_ID",	"QUERY_COV",	"BIT_SCORE",	"E-VALUE")
write.table(test, file = 'INPUT/genes/mucA_seqs_from_IPCD.tsv'
, sep='\t'
, quote = T
, row.names = F
, col.names = T)
test = read.table('INPUT/genes/rpoA_seqs_from_IPCD.tsv'
, header = F
, sep='\t')
colnames(test) = c("INFO",	"SEQUENCE",	"MISMATCH",	"GAPS",	"PCT_ID",	"QUERY_COV",	"BIT_SCORE",	"E-VALUE")
write.table(test, file = 'INPUT/genes/rpoA_seqs_from_IPCD.tsv'
, sep='\t'
, quote = T
, row.names = F
, col.names = T)
source('~/GitHub/Frequency_of_quorum_sensing_mutations_in_Pa2021/MASTER_IPCD-analysis.R')
df.lasR_meta
df.truncations
source('~/GitHub/Frequency_of_quorum_sensing_mutations_in_Pa2021/MASTER_IPCD-analysis.R')
gene
