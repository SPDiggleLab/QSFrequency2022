v.seqs = unlist(lapply(ALL, as.character)) # char
print(v.seqs)
v.seq_nos = names(ALL) # char
names(v.seqs) = v.seq_nos
nSeqs = length(v.seqs)
# find uniques
v.unique_seqs = v.seqs[!duplicated(v.seqs)]
# Reduce to unique AA sequences
ls_unique_seqs = ALL[names(v.unique_seq_nos)] # WARNING: the 'unique' function doesn't work with lists
# Calculate distances on AA sequences BIOSTRINGS
ls.uniqueAADist = lapply(ls_unique_seqs, function(x){
ret = ALIGN_VS_REF_BIOSTRING(x, ls_unique_seqs)
})
# Format distance matrix of unique AA sequences
df.uniqueAADist = do.call('rbind', ls.uniqueAADist)
colnames(df.uniqueAADist) = v.unique_seqs
rownames(df.uniqueAADist) = v.unique_seqs
# Format distance matrix of unique NT sequences
df.fullAADist = data.frame(matrix(rep(0, nSeqs^2), ncol = nSeqs))
colnames(df.fullAADist) = v.seq_nos
rownames(df.fullAADist) = v.seq_nos
# Fill distance matrix of unique NT sequences
for(i in 1:nSeqs){
for(j in 1:nSeqs){
i.seq = v.seqs[v.seq_nos[i]]
j.seq = v.seqs[v.seq_nos[j]]
if(!j.seq %in% v.unique_seqs){
print(j.seq)
}
df.fullAADist[i,j] = df.uniqueAADist[i.seq, j.seq]
}
}
return(df.fullAADist)
} #
test_ALIGN_VS_SELF_BIOSTRING = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
ALIGN_VS_SELF_BIOSTRING = function(ALL=lasI_all){
# to strings
v.seqs = unlist(lapply(ALL, as.character)) # char
print(v.seqs)
v.seq_nos = names(ALL) # char
names(v.seqs) = v.seq_nos
nSeqs = length(v.seqs)
# find uniques
v.unique_seqs = v.seqs[!duplicated(v.seqs)]
# Reduce to unique AA sequences
ls_unique_seqs = ALL[names(v.unique_seqs)] # WARNING: the 'unique' function doesn't work with lists
# Calculate distances on AA sequences BIOSTRINGS
ls.uniqueAADist = lapply(ls_unique_seqs, function(x){
ret = ALIGN_VS_REF_BIOSTRING(x, ls_unique_seqs)
})
# Format distance matrix of unique AA sequences
df.uniqueAADist = do.call('rbind', ls.uniqueAADist)
colnames(df.uniqueAADist) = v.unique_seqs
rownames(df.uniqueAADist) = v.unique_seqs
# Format distance matrix of unique NT sequences
df.fullAADist = data.frame(matrix(rep(0, nSeqs^2), ncol = nSeqs))
colnames(df.fullAADist) = v.seq_nos
rownames(df.fullAADist) = v.seq_nos
# Fill distance matrix of unique NT sequences
for(i in 1:nSeqs){
for(j in 1:nSeqs){
i.seq = v.seqs[v.seq_nos[i]]
j.seq = v.seqs[v.seq_nos[j]]
if(!j.seq %in% v.unique_seqs){
print(j.seq)
}
df.fullAADist[i,j] = df.uniqueAADist[i.seq, j.seq]
}
}
return(df.fullAADist)
} #
test_ALIGN_VS_SELF_BIOSTRING = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
ALIGN_VS_SELF_BIOSTRING = function(ALL=lasI_all){
# to strings
v.seqs = unlist(lapply(ALL, as.character)) # char
print(v.seqs)
v.seq_nos = names(ALL) # char
names(v.seqs) = v.seq_nos
nSeqs = length(v.seqs)
# find uniques
v.unique_seqs = v.seqs[!duplicated(v.seqs)]
# Reduce to unique AA sequences
ls_unique_seqs = ALL[names(v.unique_seqs)] # WARNING: the 'unique' function doesn't work with lists
# Calculate distances on AA sequences BIOSTRINGS
ls.uniqueAADist = lapply(ls_unique_seqs, function(x){
ret = ALIGN_VS_REF_BIOSTRING(x, ls_unique_seqs)
})
# Format distance matrix of unique AA sequences
df.uniqueAADist = do.call('rbind', ls.uniqueAADist)
print(dim(df.uniqueAADist))
print(lengtH9v.unique_seqs)
colnames(df.uniqueAADist) = v.unique_seqs
rownames(df.uniqueAADist) = v.unique_seqs
# Format distance matrix of unique NT sequences
df.fullAADist = data.frame(matrix(rep(0, nSeqs^2), ncol = nSeqs))
colnames(df.fullAADist) = v.seq_nos
rownames(df.fullAADist) = v.seq_nos
# Fill distance matrix of unique NT sequences
for(i in 1:nSeqs){
for(j in 1:nSeqs){
i.seq = v.seqs[v.seq_nos[i]]
j.seq = v.seqs[v.seq_nos[j]]
if(!j.seq %in% v.unique_seqs){
print(j.seq)
}
df.fullAADist[i,j] = df.uniqueAADist[i.seq, j.seq]
}
}
return(df.fullAADist)
} #
test_ALIGN_VS_SELF_BIOSTRING = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
ALIGN_VS_SELF_BIOSTRING = function(ALL=lasI_all){
# to strings
v.seqs = unlist(lapply(ALL, as.character)) # char
v.seq_nos = names(ALL) # char
names(v.seqs) = v.seq_nos
nSeqs = length(v.seqs)
# find uniques
v.unique_seqs = v.seqs[!duplicated(v.seqs)]
# Reduce to unique AA sequences
ls_unique_seqs = ALL[names(v.unique_seqs)] # WARNING: the 'unique' function doesn't work with lists
# Calculate distances on AA sequences BIOSTRINGS
ls.uniqueAADist = lapply(ls_unique_seqs, function(x){
ret = ALIGN_VS_REF_BIOSTRING(x, ls_unique_seqs)
})
# Format distance matrix of unique AA sequences
df.uniqueAADist = do.call('rbind', ls.uniqueAADist)
print(dim(df.uniqueAADist))
print(lengtH9v.unique_seqs)
colnames(df.uniqueAADist) = v.unique_seqs
rownames(df.uniqueAADist) = v.unique_seqs
# Format distance matrix of unique NT sequences
df.fullAADist = data.frame(matrix(rep(0, nSeqs^2), ncol = nSeqs))
colnames(df.fullAADist) = v.seq_nos
rownames(df.fullAADist) = v.seq_nos
# Fill distance matrix of unique NT sequences
for(i in 1:nSeqs){
for(j in 1:nSeqs){
i.seq = v.seqs[v.seq_nos[i]]
j.seq = v.seqs[v.seq_nos[j]]
if(!j.seq %in% v.unique_seqs){
print(j.seq)
}
df.fullAADist[i,j] = df.uniqueAADist[i.seq, j.seq]
}
}
return(df.fullAADist)
} #
test_ALIGN_VS_SELF_BIOSTRING = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
ALIGN_VS_SELF_BIOSTRING = function(ALL=lasI_all){
# to strings
v.seqs = unlist(lapply(ALL, as.character)) # char
v.seq_nos = names(ALL) # char
names(v.seqs) = v.seq_nos
nSeqs = length(v.seqs)
# find uniques
v.unique_seqs = v.seqs[!duplicated(v.seqs)]
# Reduce to unique AA sequences
ls_unique_seqs = ALL[names(v.unique_seqs)] # WARNING: the 'unique' function doesn't work with lists
# Calculate distances on AA sequences BIOSTRINGS
ls.uniqueAADist = lapply(ls_unique_seqs, function(x){
ret = ALIGN_VS_REF_BIOSTRING(x, ls_unique_seqs)
})
# Format distance matrix of unique AA sequences
df.uniqueAADist = do.call('rbind', ls.uniqueAADist)
print(dim(df.uniqueAADist))
print(length(v.unique_seqs))
colnames(df.uniqueAADist) = v.unique_seqs
rownames(df.uniqueAADist) = v.unique_seqs
# Format distance matrix of unique NT sequences
df.fullAADist = data.frame(matrix(rep(0, nSeqs^2), ncol = nSeqs))
colnames(df.fullAADist) = v.seq_nos
rownames(df.fullAADist) = v.seq_nos
# Fill distance matrix of unique NT sequences
for(i in 1:nSeqs){
for(j in 1:nSeqs){
i.seq = v.seqs[v.seq_nos[i]]
j.seq = v.seqs[v.seq_nos[j]]
if(!j.seq %in% v.unique_seqs){
print(j.seq)
}
df.fullAADist[i,j] = df.uniqueAADist[i.seq, j.seq]
}
}
return(df.fullAADist)
} #
test_ALIGN_VS_SELF_BIOSTRING = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
ALIGN_VS_SELF_BIOSTRING = function(ALL=lasI_all){
# to strings
v.seqs = unlist(lapply(ALL, as.character)) # char
v.seq_nos = names(ALL) # char
names(v.seqs) = v.seq_nos
nSeqs = length(v.seqs)
# find uniques
v.unique_seqs = v.seqs[!duplicated(v.seqs)]
# Reduce to unique AA sequences
ls_unique_seqs = ALL[names(v.unique_seqs)] # WARNING: the 'unique' function doesn't work with lists
# Calculate distances on AA sequences BIOSTRINGS
ls.uniqueAADist = lapply(ls_unique_seqs, function(x){
ret = ALIGN_VS_REF_BIOSTRING(x, ls_unique_seqs)
})
print(ls.uniqueAADist)
# Format distance matrix of unique AA sequences
df.uniqueAADist = do.call('rbind', ls.uniqueAADist)
print(dim(df.uniqueAADist))
print(length(v.unique_seqs))
colnames(df.uniqueAADist) = v.unique_seqs
rownames(df.uniqueAADist) = v.unique_seqs
# Format distance matrix of unique NT sequences
df.fullAADist = data.frame(matrix(rep(0, nSeqs^2), ncol = nSeqs))
colnames(df.fullAADist) = v.seq_nos
rownames(df.fullAADist) = v.seq_nos
# Fill distance matrix of unique NT sequences
for(i in 1:nSeqs){
for(j in 1:nSeqs){
i.seq = v.seqs[v.seq_nos[i]]
j.seq = v.seqs[v.seq_nos[j]]
if(!j.seq %in% v.unique_seqs){
print(j.seq)
}
df.fullAADist[i,j] = df.uniqueAADist[i.seq, j.seq]
}
}
return(df.fullAADist)
} #
test_ALIGN_VS_SELF_BIOSTRING = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
ALIGN_VS_SELF_BIOSTRING = function(ALL=lasI_all){
# to strings
v.seqs = unlist(lapply(ALL, as.character)) # char
v.seq_nos = names(ALL) # char
names(v.seqs) = v.seq_nos
nSeqs = length(v.seqs)
# find uniques
v.unique_seqs = v.seqs[!duplicated(v.seqs)]
# Reduce to unique AA sequences
ls_unique_seqs = ALL[names(v.unique_seqs)] # WARNING: the 'unique' function doesn't work with lists
# Calculate distances on AA sequences BIOSTRINGS
ls.uniqueAADist = lapply(ls_unique_seqs, function(x){
ret = ALIGN_VS_REF_BIOSTRING(x, ls_unique_seqs)
})
# Format distance matrix of unique AA sequences
df.uniqueAADist = do.call('cbind', ls.uniqueAADist)
colnames(df.uniqueAADist) = v.unique_seqs
rownames(df.uniqueAADist) = v.unique_seqs
# Format distance matrix of unique NT sequences
df.fullAADist = data.frame(matrix(rep(0, nSeqs^2), ncol = nSeqs))
colnames(df.fullAADist) = v.seq_nos
rownames(df.fullAADist) = v.seq_nos
# Fill distance matrix of unique NT sequences
for(i in 1:nSeqs){
for(j in 1:nSeqs){
i.seq = v.seqs[v.seq_nos[i]]
j.seq = v.seqs[v.seq_nos[j]]
if(!j.seq %in% v.unique_seqs){
print(j.seq)
}
df.fullAADist[i,j] = df.uniqueAADist[i.seq, j.seq]
}
}
return(df.fullAADist)
} #
test_ALIGN_VS_SELF_BIOSTRING = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
test_ALIGN_VS_SELF_BIOSTRING
source('~/CYZ GITHUB/Digglets/For_Conan/analyze_seqs.R')
ALIGN_VS_SELF_BIOSTRING = function(ALL=lasI_all){
# to strings
v.seqs = unlist(lapply(ALL, as.character)) # char
v.seq_nos = names(ALL) # char
names(v.seqs) = v.seq_nos
nSeqs = length(v.seqs)
# find uniques
v.unique_seqs = v.seqs[!duplicated(v.seqs)]
# Reduce to unique AA sequences
ls_unique_seqs = ALL[names(v.unique_seqs)] # WARNING: the 'unique' function doesn't work with lists
# Calculate distances on AA sequences BIOSTRINGS
ls.uniqueAADist = lapply(ls_unique_seqs, function(x){
ret = ALIGN_VS_REF_BIOSTRING(x, ls_unique_seqs)
})
print(ls.uniqueAADist)
# Format distance matrix of unique AA sequences
df.uniqueAADist = do.call('cbind', ls.uniqueAADist)
print(dim(df.uniqueAADist))
print(length(v.unique_seqs))
colnames(df.uniqueAADist) = v.unique_seqs
rownames(df.uniqueAADist) = v.unique_seqs
# Format distance matrix of unique NT sequences
df.fullAADist = data.frame(matrix(rep(0, nSeqs^2), ncol = nSeqs))
colnames(df.fullAADist) = v.seq_nos
rownames(df.fullAADist) = v.seq_nos
# Fill distance matrix of unique NT sequences
for(i in 1:nSeqs){
for(j in 1:nSeqs){
i.seq = v.seqs[v.seq_nos[i]]
j.seq = v.seqs[v.seq_nos[j]]
if(!j.seq %in% v.unique_seqs){
print(j.seq)
}
df.fullAADist[i,j] = df.uniqueAADist[i.seq, j.seq]
}
}
return(df.fullAADist)
} #
test_ALIGN_VS_SELF_BIOSTRING = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
ls.distMats_by_gene
gene
ls.aastring_map
ls.complete_genes[[gene]]
ref_gene
gene_length
df.truncations
n_trunc
n_gaps
ref_gene = read.table(paste('INPUT/ref_genes/', gene, '_PAO1_protein.txt', sep='', collapse='')
, stringsAsFactors = F)$V1
# query gene data
df.gene = ls.in[[gene]]
# Calculate reference gene length
gene_length = nchar(ref_gene)*3 # protein sequence * 3
# Get the number of genes used in the analysis
n_genes = nrow(df.gene)
# Get the number of unique genes used in the analysis
n_unique_genes = n_genes - sum(duplicated(df.gene$STRAIN))
# Get number of entries with '-' gaps
b.gaps = grepl('-', df.gene$SEQUENCE)
n_gaps = sum(b.gaps)
# Remove gap-aligned sequences
df.gene = df.gene[!b.gaps,]
# Get number of truncations
v.gene_lens = sapply(df.gene$SEQUENCE, function(x){nchar(x)})
b.ref_length = (v.gene_lens <= TRUNCATION_CUTOFF*gene_length)
n_trunc = sum(b.ref_length)
mean_length = mean(v.gene_lens)
# Remove
df.gene = df.gene[!b.ref_length,]
# Get number of
ls.truncations[[gene]] = c('gene' = gene
, 'n_base' = gene_length
, 'n_genes' = n_genes
, 'n_unique' = n_unique_genes
, 'p_incomplete' = (n_trunc+n_gaps)/n_genes
, 'mean_len' = mean_length/gene_length) # save satts
ls.complete_genes[[gene]] = df.gene # save t
gene
gene_length
n_genes
n_unique_genes
(n_trunc+n_gaps)/n_genes
n_trunc
n_gaps
ref_gene
df.gene
ls.in[[gene]][1:3,]
v.gene_lens
gene_lengthv.gene_lens
gene_length
b.ref_length
source('~/CYZ GITHUB/Digglets/For_Conan/analyze_seqs.R')
source('~/CYZ GITHUB/Digglets/For_Conan/analyze_seqs.R')
ls.distMats_by_gene[[1]]
v.seq_names
v.seq_map
df.distMat = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
rownames(df.distMat) = v.seq_names[rownames(df.distMat)]
colnames(df.distMat) = v.seq_names[colnames(df.distMat)]
ls.distMats_by_gene[[gene]] = df.distMat
v.seq_names[rownames(df.distMat)][duplicated(v.seq_names[rownames(df.distMat)],)]
v.seq_names[rownames(df.distMat)][duplicated(v.seq_names[rownames(df.distMat)]),]
v.seq_names[rownames(df.distMat)][duplicated(v.seq_names[rownames(df.distMat)])]
v.seq_names[rownames(df.distMat)]
rownames(df.distMat)
v.seq_names[rownames(df.distMat)]
v.seq_names
df.distMat = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
rownames(df.distMat) = v.seq_map[rownames(df.distMat)]
colnames(df.distMat) = v.seq_map[colnames(df.distMat)]
ls.distMats_by_gene[[gene]] = df.distMat
ls.distMats_by_gene[[gene]]
temp.in$SEQUENCE
# Sequence-to-Strain map
v.STRAIN_TO_SEQ = temp.in$SEQUENCE
nameS(v.STRAIN_TO_SEQ) = temp.in$STRAIN
names(v.STRAIN_TO_SEQ) = temp.in$STRAIN
df.distMat_by_strain = data.frame(matrix(rep(0, nStrains^2), ncol = nStrains))
rownames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
colnames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
# Sequence-to-Strain map
v.STRAIN_TO_SEQ = temp.in$SEQUENCE
names(v.STRAIN_TO_SEQ) = temp.in$STRAIN
nStrains = length(v.STRAIN_TO_SEQ)
df.distMat_by_strain = data.frame(matrix(rep(0, nStrains^2), ncol = nStrains))
rownames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
colnames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
names(v.STRAIN_TO_SEQ)[duplicated(names(v.STRAIN_TO_SEQ))]
temp.in[temp.in$STRAIN == "3052425557",]
test = temp.in[temp.in$STRAIN == "3052425557",]
test$SEQUENCE[1] == test$SEQUENCE[2]
df.in = read.table('OUTPUT/2020-04-11_master-table.csv', header = T, sep=',', stringsAsFactors = F)
df.in[df.in$STRAIN == '3052425557']
df.in = read.table('OUTPUT/2020-04-11_master-table.csv', header = T, sep=',', stringsAsFactors = F,)
df.in[df.in$STRAIN == '3052425557',]
# Must have environment
df.in = df.in[!is.na(df.in$ENV),]
unique(df.in$ENV)
df.in = read.table('OUTPUT/2020-04-11_master-table.csv', header = T, sep=',', stringsAsFactors = F)
table(df.in$ENV)
head(df.in)
table(df.in$SOURCE)
table(df.in$PI)
df.in[is.na(df.in$PI),]
df.in[is.na(df.in$SOURCE),]
unique(df.in$SOURCE)
# Fill in Blanks
df.in[df.in==''] = NA
df.in[is.na(df.in$PI),]
df.in[is.na(df.in$ENV),]
df.distMat_by_seq = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
rownames(df.distMat_by_seq) = v.seq_map[rownames(df.distMat_by_seq)]
colnames(df.distMat_by_seq) = v.seq_map[colnames(df.distMat_by_seq)]
df.distMat_by_seq = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
rownames(df.distMat_by_seq) = v.seq_map[rownames(df.distMat_by_seq)]
colnames(df.distMat_by_seq) = v.seq_map[colnames(df.distMat_by_seq)]
df.distMat_by_strain = data.frame(matrix(rep(0, nStrains^2), ncol = nStrains))
rownames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
colnames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
# go by row to make it easier
for(i_distMat_by_strain in 1:nrow(df.distMat_by_strain)){
df.distMat_by_seq[i_distMat_by_strain,v.STRAIN_TO_SEQ] = df.distMat_by_seq[v.STRAIN_TO_SEQ[i_distMat_by_strain], i_distMat_by_strain]
}
# go by row to make it easier
for(i_distMat_by_strain in 1:nrow(df.distMat_by_strain)){
df.distMat_by_strain[i_distMat_by_strain,v.STRAIN_TO_SEQ] = df.distMat_by_seq[v.STRAIN_TO_SEQ[i_distMat_by_strain], i_distMat_by_strain]
}
i_distMat_by_strain
# go by row to make it easier
for(i_distMat_by_strain in 1:nrow(df.distMat_by_strain)){
df.distMat_by_strain[i_distMat_by_strain,v.STRAIN_TO_SEQ] = df.distMat_by_seq[v.STRAIN_TO_SEQ[i_distMat_by_strain], v.STRAIN_TO_SEQ]
}
head(df.distMat_by_strain)
names(v.STRAIN_TO_SEQ)
df.distMat_by_strain = data.frame(matrix(rep(0, nStrains^2), ncol = nStrains))
rownames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
colnames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
df.gene
v.STRAIN_TO_SEQ[i_distMat_by_strain]
length(v.STRAIN_TO_SEQ)
dim(df.distMat_by_strain)
df.distMat_by_strain[i_distMat_by_strain,v.STRAIN_TO_SEQ] = df.distMat_by_seq[v.STRAIN_TO_SEQ[i_distMat_by_strain], v.STRAIN_TO_SEQ]
# go by row to make it easier
for(i_distMat_by_strain in 1:nrow(df.distMat_by_strain)){
df.distMat_by_strain[i_distMat_by_strain,v.STRAIN_TO_SEQ] = df.distMat_by_seq[v.STRAIN_TO_SEQ[i_distMat_by_strain], v.STRAIN_TO_SEQ]
}
# go by row to make it easier
for(i_distMat_by_strain in 1:nrow(df.distMat_by_strain)){
print(i_distMat_by_strain)
df.distMat_by_strain[i_distMat_by_strain,v.STRAIN_TO_SEQ] = df.distMat_by_seq[v.STRAIN_TO_SEQ[i_distMat_by_strain], v.STRAIN_TO_SEQ]
}
source('~/CYZ GITHUB/Digglets/For_Conan/analyze_seqs.R')
temp.in$STRAIN[duplicated(temp.in$STRAIN)]
v.STRAIN_TO_SEQ
df.distMat_by_strain[i_distMat_by_strain,names(v.STRAIN_TO_SEQ)] = df.distMat_by_seq[v.STRAIN_TO_SEQ[i_distMat_by_strain], v.STRAIN_TO_SEQ]
# go by row to make it easier
for(i_distMat_by_strain in 1:nrow(df.distMat_by_strain)){
print(i_distMat_by_strain)
df.distMat_by_strain[i_distMat_by_strain,names(v.STRAIN_TO_SEQ)] = df.distMat_by_seq[v.STRAIN_TO_SEQ[i_distMat_by_strain], v.STRAIN_TO_SEQ]
}
source('~/CYZ GITHUB/Digglets/For_Conan/analyze_seqs.R')
ls.distMats_by_gene[[1]]
View(ls.distMats_by_gene[[1]])
save(ls.distMats_by_gene, file='list_of_strain_distMats_by_gene.R')
!file.exists('list_of_strain_distMats_by_gene.R')
if(!file.exists('list_of_strain_distMats_by_gene.R')){
ls.distMats_by_gene = list()
for(gene in names(ls.complete_genes)){
print(gene)
temp.in = ls.complete_genes[[gene]]
temp.in$STRAIN[duplicated(temp.in$STRAIN)] = paste(temp.in$STRAIN[duplicated(temp.in$STRAIN)], '_2', sep='', collapse='')
# Sequence-to-Strain map
v.STRAIN_TO_SEQ = temp.in$SEQUENCE
names(v.STRAIN_TO_SEQ) = temp.in$STRAIN
nStrains = length(v.STRAIN_TO_SEQ)
# Remove redundant calculations & create Sequence-to-SeqNO map
v.seq_map = unique(temp.in$SEQUENCE)
v.seq_names = paste('SEQ_', 1:length(v.seq_map), sep='')
names(v.seq_map) = v.seq_names
ls.aastring_map = list()
for(i in 1:length(v.seq_map)){
temp.seq_name = v.seq_names[i]
temp.str_in = v.seq_map[i]
temp.dnastring = DNAString(temp.str_in)
temp.aastring = translate(temp.dnastring, if.fuzzy.codon = c('solve', 'X'), no.init.codon = T)
ls.aastring_map[[temp.seq_name]] = temp.aastring
}
df.distMat_by_seq = ALIGN_VS_SELF_BIOSTRING(ls.aastring_map)
rownames(df.distMat_by_seq) = v.seq_map[rownames(df.distMat_by_seq)]
colnames(df.distMat_by_seq) = v.seq_map[colnames(df.distMat_by_seq)]
df.distMat_by_strain = data.frame(matrix(rep(0, nStrains^2), ncol = nStrains))
rownames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
colnames(df.distMat_by_strain) = names(v.STRAIN_TO_SEQ)
# go by row to make it easier
for(i_distMat_by_strain in 1:nrow(df.distMat_by_strain)){
df.distMat_by_strain[i_distMat_by_strain,names(v.STRAIN_TO_SEQ)] = df.distMat_by_seq[v.STRAIN_TO_SEQ[i_distMat_by_strain], v.STRAIN_TO_SEQ]
}
ls.distMats_by_gene[[gene]] = df.distMat_by_strain
}
save(ls.distMats_by_gene, file='list_of_strain_distMats_by_gene.R')
}
df.truncations
write.csv(df.truncations, file = 'OUTPUT/gene_truncated_stats.csv',sep = ',')
write.csv(df.truncations, file = 'OUTPUT/gene_truncated_stats.csv')
source('~/CYZ GITHUB/Digglets/For_Conan/analyze_seqs.R')
source('~/CYZ GITHUB/Digglets/For_Conan/parse_inputs.R')
load('list_of_strain_distMats_by_gene.R')
