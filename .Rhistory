print('warn')
p_pca = fviz_pca_ind(princomp(df.dist_in), label = '', invisible="quali", pointsize = 2)
}
, error = function(cond) {
print('err')
df.dist_in = unique(t(unique(df.dist)))
meta_in = meta[rownames(meta),]
p_pca = fviz_pca_ind(princomp(df.dist_in), label = '', invisible="quali", pointsize = 2)
}
, finally = {
ggsave(filename = paste('./OUTPUT/PCAs/pca_', gene, '.png', sep='', collapse = '')
, plot = p_pca
, device = 'png')
})
}
source('~/CYZ GITHUB/Digglets/For_Conan/visualize_distances.R')
names(ls.distMats_by_gene)
gene = 'lasI'
# Load Data
df.dist = ls.distMats_by_gene[[gene]]
meta = ls.complete_gene_MetaSeq[[gene]][,c('STRAIN', 'GENE', 'HOST', 'SOURCE', 'ENV', 'PI')]
# Clean Data
meta = meta[!duplicated(meta$STRAIN),] # remove duplicates
rownames(meta) = meta$STRAIN
meta = meta[rownames(df.dist),] # order w.r.t. df.dist
b.has_SOURCE = !is.na(meta$SOURCE)
df.dist = data.matrix(df.dist)
df.dist = df.dist[b.has_SOURCE, b.has_SOURCE]
# PCA on a reduced set.
# PCA on a reduced set.
tryCatch(expr = {
p_pca = fviz_pca_ind(princomp(df.dist), label = '', habillage = meta[rownames(df.dist), 'SOURCE'], invisible="quali", pointsize = 2)
}
, warning = function(cond) {
print('warn')
p_pca = fviz_pca_ind(princomp(df.dist), label = '', habillage = meta[rownames(df.dist), 'SOURCE'], invisible="quali", pointsize = 2)
}
, error = function(cond) {
print('err')
df.dist_in = unique(t(unique(df.dist)))
meta_in = meta[rownames(meta),]
p_pca = fviz_pca_ind(princomp(df.dist_in), label = '', invisible="quali", pointsize = 2)
}
, finally = {
ggsave(filename = paste('./OUTPUT/PCAs/pca_', gene, '.png', sep='', collapse = '')
, plot = p_pca
, device = 'png')
})
# PCA on a reduced set.
tryCatch(expr = {
p_pca = fviz_pca_ind(princomp(df.dist), label = '', habillage = meta[rownames(df.dist), 'SOURCE'], invisible="quali", pointsize = 2)
}
, warning = function(cond) {
print('warn')
p_pca = fviz_pca_ind(princomp(df.dist), label = '', habillage = meta[rownames(df.dist), 'SOURCE'], invisible="quali", pointsize = 2)
}
, error = function(cond) {
print('err')
df.dist_in = unique(t(unique(df.dist)))
meta_in = meta[rownames(meta),]
p_pca = fviz_pca_ind(princomp(df.dist_in), label = '', invisible="quali", pointsize = 2)
print('err')
}
, finally = {
ggsave(filename = paste('./OUTPUT/PCAs/pca_', gene, '.png', sep='', collapse = '')
, plot = p_pca
, device = 'png')
})
# PCA on a reduced set.
tryCatch(expr = {
p_pca = fviz_pca_ind(princomp(df.dist), label = '', habillage = meta[rownames(df.dist), 'SOURCE'], invisible="quali", pointsize = 2)
ggsave(filename = paste('./OUTPUT/PCAs/pca_', gene, '.png', sep='', collapse = '')
, plot = p_pca
, device = 'png')
}
, warning = function(cond) {
print('warn')
p_pca = fviz_pca_ind(princomp(df.dist), label = '', habillage = meta[rownames(df.dist), 'SOURCE'], invisible="quali", pointsize = 2)
ggsave(filename = paste('./OUTPUT/PCAs/pca_', gene, '.png', sep='', collapse = '')
, plot = p_pca
, device = 'png')
}
, error = function(cond) {
print('err')
df.dist_in = unique(t(unique(df.dist)))
meta_in = meta[rownames(meta),]
p_pca = fviz_pca_ind(princomp(df.dist_in), label = '', invisible="quali", pointsize = 2)
ggsave(filename = paste('./OUTPUT/PCAs/pca_', gene, '.png', sep='', collapse = '')
, plot = p_pca
, device = 'png')
print('err')
}
})
# PCA on a reduced set.
tryCatch(expr = {
p_pca = fviz_pca_ind(princomp(df.dist), label = '', habillage = meta[rownames(df.dist), 'SOURCE'], invisible="quali", pointsize = 2)
ggsave(filename = paste('./OUTPUT/PCAs/pca_', gene, '.png', sep='', collapse = '')
, plot = p_pca
, device = 'png')
}
, warning = function(cond) {
print('warn')
p_pca = fviz_pca_ind(princomp(df.dist), label = '', habillage = meta[rownames(df.dist), 'SOURCE'], invisible="quali", pointsize = 2)
ggsave(filename = paste('./OUTPUT/PCAs/pca_', gene, '.png', sep='', collapse = '')
, plot = p_pca
, device = 'png')
}
, error = function(cond) {
print('err')
df.dist_in = unique(t(unique(df.dist)))
meta_in = meta[rownames(meta),]
p_pca = fviz_pca_ind(princomp(df.dist_in), label = '', invisible="quali", pointsize = 2)
ggsave(filename = paste('./OUTPUT/PCAs/pca_', gene, '.png', sep='', collapse = '')
, plot = p_pca
, device = 'png')
print('err')
})
source('~/CYZ GITHUB/Digglets/For_Conan/visualize_distances.R')
df.dist
mode(df.dist)
hist(df.dist)
rm(list = ls())
# 1. Outbreaks: from deterministic models to stochastic realizatio --------
# 2. Epidemic Model - Fundamentals ----------------------------------------
# >> A --------------------------------------------------------------------
SIR_model = function(t,y,pars){
with(as.list(pars),{
# SIR Model
S = y[1]
I = y[2]
# The model
dSdt = -pars$beta*S*I
dIdt = pars$beta*S*I - pars$gamma*I
dRdt = pars$gamma*I
dydt = list(c(dSdt, dIdt, dRdt))
return(dydt)
})
}
require(deSolve)   # ODE solver / numerical integration
require(ggplot2)   # Plotting
require(reshape2)  # Data Reformatting for plots
# Main data goes here
pars_base = list()
pars_base['c'] = 20                                  # Contacts per unit time (days)
pars_base['p'] = 0.025                               # Probability of infectious contact
pars_base['beta'] = pars_base$c*pars_base$p          # Transmission rate
pars_base['gamma'] = 1/4                             # Recovery rate (1/days)
# Number of Individuals
pars_base['N'] = 10000
pars_base['R_inds'] = pars_base$beta/pars_base$gamma
pars_base['I_inds'] = 1
pars_base['S_inds'] = pars_base$N - pars_base$I_inds
# Population Fractions
pars_base['S0'] = pars_base$S_inds/pars_base$N
pars_base['I0'] = pars_base$I_inds/pars_base$N
pars_base['R0'] = pars_base$R_inds/pars_base$N
# Run the model
pars = pars_base
y0 = c('S' = pars$S0
, 'I' = pars$I0
, 'R' = pars$R0)
t = seq(0, 100, by = 0.25)
y = ode(y0, t, SIR_model, pars)
y = as.data.frame(y, stringsAsFactors = T)
# Plot the results
melt_y = melt(y, c('time'), variable.name = 'class', value.name = 'popfrac')
ggplot(melt_y, aes(x = time, y = popfrac, color = class)) +
geom_line(size = 1.2) +
xlab('Time (days)') +
ylab('Population Fraction')
# >> B. Speed, Strength, and Size -----------------------------------------
# >> B.1 Strength and Speed -----------------------------------------------
# Run the model over 30 days
pars = pars_base
y0 = c('S' = pars$S0
, 'I' = pars$I0
, 'R' = pars$R0)
t = seq(0,30)
y = ode(y0, t, SIR_model, pars)
y = as.data.frame(y, stringsAsFactors = F)
# Find the slope over the first 10 days
fit_I_coefs = lm(log(I)~time, y[1:11,])$coefficients
fit_I_log = fit_I_coefs[2]*t[1:11] + fit_I_coefs[1]
y$I_fit = rep(NA, length(t))
y$I_fit[1:11] = exp(fit_I_log)
# Plot the data and overlay the best-fit exponential
ggplot(y, aes(x = time)) +
geom_point(aes(y = I, shape = time<11), size = 4) +
geom_line(aes(y = I_fit), color = 'red', size = 2) +
scale_shape_manual(values = c(16, 1)) +
scale_y_log10()  +
xlab('Time (days)') +
ylab('Infectious Fraction') +
theme(legend.position = 'none')
# >> B.1 CHALLENGE --------------------------------------------------------
# Strength-Speed relationships
df.pars = data.frame('beta' = c(0.5, 1, 0.25, 0.75)
, 'gamma' = c(0.4, 0.5, 0.5, 0.25))
df.pars$R0 = df.pars$beta / df.pars$gamma
df.pars$r = NA
df.pars$scenario = c('A', 'B', 'C', 'D')
df.res = data.frame() # Setup result dataframe
for(i in 1:nrow(df.pars)){ # Loop over scenarios
pars_in = df.pars[i,]
pars$beta = pars_in$beta
pars$gamma = pars_in$gamma
pars$R0 = pars_in$R0
# Model
t = seq(0,30)
y = ode(y0, t, SIR_model, pars)
y = as.data.frame(y, stringsAsFactors = F)
y$scenario = pars_in$scenario
# Find the slope over the first 10 days to find speed
fit_I = rep(NA, length(t))
fit_I_coefs = lm(log(I)~time, y[1:11,])$coefficients
fit_r = fit_I_coefs[2]
# Use the fit to generate fit data over 10 days
fit_I_log = fit_I_coefs[2]*t[1:11] + fit_I_coefs[1]
fit_I[1:11] = exp(fit_I_log)
# Append fit data to dataframe
y$I_fit = fit_I
# save results
df.pars$r[i] = round(fit_r, digits = 2)
df.res = rbind(df.res, y)
}
# Reset
pars = pars_base
# Modify the initial values
pars['S0_range'] = list(c(0.6, 0.7, 0.8, 0.9, 0.999))
pars['I0_range'] = list(1/pars$N*rep(1,5))
pars['R0_range'] = list(1 - pars$S0_range - pars$I0_range)
df.res = data.frame() # Setup result dataframe
for(i in 1:length(pars$S0_range)){ # Run the model
pars$S0 = pars$S0_range[i]
pars$I0 = pars$I0_range[i]
pars$R0 = pars$R0_range[i] # this is terrible coding practice - XXX CYZ
y0 = c('S' = pars$S0
, 'I' = pars$I0
, 'R' = pars$R0)
t = seq(0,200, by = 0.25)
y = ode(y0, t, SIR_model, pars)
y = as.data.frame(y, stringsAsFactors = F)
y$S0 = pars$S0
df.res = rbind(df.res, y)
}
# Limit polygon
df.poly = data.frame(x = c(0.75, 1, 1)
, y = c(0.25, 0, 0.25))
ggplot() +
geom_line(data=df.res, aes(x = S, y = I, group = S0), size = 1) +
geom_point(data=df.res[df.res$time == 200,], aes(x = S, y = I), size = 3, color = 'red') +
geom_point(data=df.res[df.res$time == 0,], aes(x = S, y = I), size = 3, color = 'black') +
geom_point(data=df.res[df.res$time == 0,], aes(x = S, y = I), size = 3, shape=1) +
scale_x_continuous(expand = c(0,0)
, limits = c(0,1)
, breaks = seq(0, 1, by=0.2)) +
scale_y_continuous(expand = c(0,0)
, limits = c(0,0.25)
, breaks = seq(0, .25, by=0.05)) +
xlab('Susceptible fraction, S') +
ylab('Infections fraction, I') +
geom_polygon(data=df.poly, aes(x,y), fill = 'gray20', alpha = 0.5) +
geom_segment(aes(x = 1, y = 0, xend = 0.75, yend = 0.25)) +
coord_cartesian(clip='off') +
theme(legend.position = 'none')
# Reset
pars = pars_base
# Modify the initial values
pars$S0 = 0.8
pars$I0 = 1/pars$N
pars$R0 = 1 - pars$S0 - pars$I0
pars['beta_range'] = list(10^(seq(0,1, by=0.25))*0.25)
df.res = data.frame() # Setup result dataframe
for(i in 1:length(pars$beta_range)){ # Run the model
pars['beta'] = pars$beta_range[i]
y0 = c('S' = pars$S0
, 'I' = pars$I0
, 'R' = pars$R0)
t = seq(0, 200, by=0.25)
y = ode(y0, t, SIR_model, pars)
y = as.data.frame(y, stringsAsFactors = F)
y$beta = pars$beta
df.res = rbind(df.res, y)
}
# Limit polygon
df.poly = data.frame(x = c(0.5, 1, 1)
, y = c(0.5, 0, 0.5))
ggplot() +
geom_line(data=df.res, aes(x = S, y = I, group = beta), size = 1) +
geom_point(data=df.res[df.res$time == 200,], aes(x = S, y = I), size = 3, color = 'black') +
geom_point(data=df.res[df.res$time == 0,], aes(x = S, y = I), size = 3, shape=1) +
scale_x_continuous(expand = c(0,0)
, limits = c(0,1)
, breaks = seq(0, 1, by=0.2)) +
scale_y_continuous(expand = c(0,0)
, limits = c(0,0.5)
, breaks = seq(0, .5, by=0.1)) +
xlab('Susceptible fraction, S') +
ylab('Infections fraction, I') +
geom_polygon(data=df.poly, aes(x,y), fill = 'gray20', alpha = 0.5) +
geom_segment(aes(x = 1, y = 0, xend = .5, yend = .5)) +
coord_cartesian(clip='off') +
theme(legend.position = 'none')
SI_model = function(t,y,pars){
with(as.list(pars),{
# SI Model
S = y[1]
I = y[2]
# The model
dSdt = -pars$beta*S*I + pars$gamma*I
dIdt = pars$beta*S*I - pars$gamma*I
dydt = list(c(dSdt, dIdt))
return(dydt)
})
}
pars = list()
pars['c'] = 20                        # Contacts per unit time (days)
pars['p'] = 0.025                     # transmission rate
pars['beta'] = 0.3
pars['gamma'] = 1/4                   # Recovery rate (1/days)
pars['N'] = 10000
pars['I0'] = 1/pars$N
pars['S0'] = 1
pars['R0'] = 0
pars
pars_default
pars_base
require(reshape2)  # Data Reformatting for plots
# Main data goes here
pars_base = list()
pars_base['c'] = 20                                  # Contacts per unit time (days)
pars_base['p'] = 0.025                               # Probability of infectious contact
pars_base['beta'] = pars_base$c*pars_base$p          # Transmission rate
pars_base['gamma'] = 1/4                             # Recovery rate (1/days)
pars_base['R_naught'] = pars_base$beta/pars_base$gamma
# Number of Individuals
pars_base['N'] = 10000
pars_base['R_inds'] = 0
pars_base['I_inds'] = 1
pars_base['S_inds'] = pars_base$N - pars_base$I_inds
# Population Fractions
pars_base['S0'] = pars_base$S_inds/pars_base$N
pars_base['I0'] = pars_base$I_inds/pars_base$N
pars_base['R0'] = pars_base$R_inds/pars_base$N
SI_model = function(t,y,pars){
with(as.list(pars),{
# SI Model
S = y[1]
I = y[2]
# The model
dSdt = -pars$beta*S*I + pars$gamma*I
dIdt = pars$beta*S*I - pars$gamma*I
dydt = list(c(dSdt, dIdt))
return(dydt)
})
}
# Transmission/recovery vs Outbreak size
pars = pars_base
# Modify the initial values
pars['beta'] = 0.3
y0 = c('S' = pars$S0, 'I' = pars$I0, 'R' = pars$R0)
t = seq(0, 365, by = 0.25)
v.abbr = c('S' = 'Susceptible', 'I' = 'Infectious', 'R' = 'Recovered') # For Plotting Later
y_SIR = ode(y0, t, SIR_model, pars)
melt_SIR = melt(as.data.frame(y_SIR), c('time'), value.name = 'popfrac', variable.name = 'class')
melt_SIR$class = v.abbr[melt_SIR$class]
melt_SIR$class = factor(melt_SIR$class, levels = v.abbr)
ggplot(melt_SIR, aes(x = time, y = popfrac, color = class)) +
theme_clean(base_size=20) +
geom_line(size = 2) +
ylab("Population fraction") +
xlab("Time (days)") +
scale_color_manual(values = c('dodgerblue4', 'orangered3', 'darkgoldenrod4')) +
theme(aspect.ratio = 1
, legend.title = element_blank()
, legend.background = element_blank()
, legend.position = c(.8, 0.85))
y_SI = ode(y0[-3], t, SI_model, pars)
melt_SI = melt(as.data.frame(y_SI), c('time'), value.name = 'popfrac', variable.name = 'class')
melt_SI$class = v.abbr[melt_SI$class]
melt_SI$class = factor(melt_SI$class, levels = v.abbr)
ggplot(melt_SI, aes(x = time, y = popfrac, color = class)) +
theme_clean(base_size=20) +
geom_line(size = 2) +
ylab("Population fraction") +
xlab("Time (days)") +
scale_color_manual(values = c('dodgerblue4', 'orangered3')) +
theme(aspect.ratio = 1
, legend.title = element_blank()
, legend.background = element_blank()
, legend.position = c(.8, 0.9))
# Transmission/recovery vs Outbreak size
pars = pars_base
# Modify the initial values
pars['beta'] = 0.3
y0 = c('S' = pars$S0, 'I' = pars$I0, 'R' = pars$R0)
t = seq(0, 365, by = 0.25)
v.abbr = c('S' = 'Susceptible', 'I' = 'Infectious', 'R' = 'Recovered') # For Plotting Later
y_SIR = ode(y0, t, SIR_model, pars)
melt_SIR = melt(as.data.frame(y_SIR), c('time'), value.name = 'popfrac', variable.name = 'class')
melt_SIR$class = v.abbr[melt_SIR$class]
melt_SIR$class = factor(melt_SIR$class, levels = v.abbr)
ggplot(melt_SIR, aes(x = time, y = popfrac, color = class)) +
theme_clean(base_size=20) +
geom_line(size = 2) +
ylab("Population fraction") +
xlab("Time (days)") +
scale_color_manual(values = c('dodgerblue4', 'orangered3', 'darkgoldenrod4')) +
theme(aspect.ratio = 1
, legend.title = element_blank()
, legend.background = element_blank()
, legend.position = c(.8, 0.85))
y_SI = ode(y0[-3], t, SI_model, pars)
melt_SI = melt(as.data.frame(y_SI), c('time'), value.name = 'popfrac', variable.name = 'class')
melt_SI$class = v.abbr[melt_SI$class]
melt_SI$class = factor(melt_SI$class, levels = v.abbr)
ggplot(melt_SI, aes(x = time, y = popfrac, color = class)) +
geom_line(size = 2) +
ylab("Population fraction") +
xlab("Time (days)") +
scale_color_manual(values = c('dodgerblue4', 'orangered3')) +
theme(aspect.ratio = 1
, legend.title = element_blank()
, legend.background = element_blank()
, legend.position = c(.8, 0.9))
ggplot(melt_SIR, aes(x = time, y = popfrac, color = class)) +
theme_clean(base_size=20) +
geom_line(size = 2) +
ylab("Population fraction") +
xlab("Time (days)") +
scale_color_manual(values = c('dodgerblue4', 'orangered3', 'darkgoldenrod4')) +
theme(aspect.ratio = 1
, legend.title = element_blank()
, legend.background = element_blank()
, legend.position = c(.8, 0.85))
ggplot(melt_SIR, aes(x = time, y = popfrac, color = class)) +
geom_line(size = 2) +
ylab("Population fraction") +
xlab("Time (days)") +
scale_color_manual(values = c('dodgerblue4', 'orangered3', 'darkgoldenrod4')) +
theme(aspect.ratio = 1
, legend.title = element_blank()
, legend.background = element_blank()
, legend.position = c(.8, 0.85))
ggplot(melt_SI, aes(x = time, y = popfrac, color = class)) +
geom_line(size = 2) +
ylab("Population fraction") +
xlab("Time (days)") +
scale_color_manual(values = c('dodgerblue4', 'orangered3')) +
theme(aspect.ratio = 1
, legend.title = element_blank()
, legend.background = element_blank()
, legend.position = c(.8, 0.9))
source('C:/Users/czhao/Desktop/translate_to_R/final_R_workshop_file.R')
# Plot the data and overlay the best-fit exponential
ggplot(df.res, aes(x = time)) +
theme_clean(base_size=20) +
geom_point(aes(y = I, color = time<11), size = 4, shape = 1) +
geom_line(aes(y = I_fit), color = 'red', size = 2) +
scale_color_manual(values = c('blue', 'black')) +
scale_x_continuous(expand = c(0,0), limits = c(0,30)) +
scale_y_log10() +
xlab('Time (days)') +
ylab('Infectious Fraction') +
theme(legend.position = 'none'
, aspect.ratio = 1
, plot.margin = margin(20,20,10,10, 'pt')) +
facet_wrap('scenario', scales = 'free', nrow = 1)
source('C:/Users/czhao/Desktop/translate_to_R/final_R_workshop_file.R')
# Strength-Speed relationships
df.pars = data.frame('beta' = c(0.5, 1, 0.25, 0.75)
, 'gamma' = c(0.4, 0.5, 0.5, 0.25))
df.pars$R0 = df.pars$beta / df.pars$gamma
df.pars$r = NA
df.pars$scenario = c('A', 'B', 'C', 'D')
df.res = data.frame() # Setup result dataframe
for(i in 1:nrow(df.pars)){ # Loop over scenarios
pars_in = df.pars[i,]
pars$beta = pars_in$beta
pars$gamma = pars_in$gamma
pars$R0 = pars_in$R0
# Model
t = seq(0,30)
y = ode(y0, t, SIR_model, pars)
y = as.data.frame(y, stringsAsFactors = F)
y$scenario = pars_in$scenario
# Find the slope over the first 10 days to find speed
fit_I = rep(NA, length(t))
fit_I_coefs = lm(log(I)~time, y[1:11,])$coefficients
fit_r = fit_I_coefs[2]
# Use the fit to generate fit data over 10 days
fit_I_log = fit_I_coefs[2]*t[1:11] + fit_I_coefs[1]
fit_I[1:11] = exp(fit_I_log)
# Append fit data to dataframe
y$I_fit = fit_I
# save results
df.pars$r[i] = round(fit_r, digits = 2)
df.res = rbind(df.res, y)
}
# Plot the data and overlay the best-fit exponential
ggplot(df.res, aes(x = time)) +
geom_point(aes(y = I, color = time<11), size = 4, shape = 1) +
geom_line(aes(y = I_fit), color = 'red', size = 2) +
scale_color_manual(values = c('blue', 'black')) +
scale_x_continuous(expand = c(0,0), limits = c(0,30)) +
scale_y_log10() +
xlab('Time (days)') +
ylab('Infectious Fraction') +
theme(legend.position = 'none'
, aspect.ratio = 1
, plot.margin = margin(20,20,10,10, 'pt')) +
facet_wrap('scenario', scales = 'free', nrow = 1)
